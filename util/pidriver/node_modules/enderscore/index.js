'use strict';

var _ = require('underscore'),
	util = require('util'),
	$ = {};

var
    nativeIsInteger = Number.isInteger,
    nativeIsFinite = Number.isFinite;

$.isFinite = nativeIsFinite || _.isFinite;

$.isInteger = nativeIsInteger || function(num){
    return (_.isFinite(num) && num%1===0);
};

$.arrayLike = function(args){
	return Array.prototype.slice.call(arguments);
};

$.unpairs = function(names, values){
	var ret = {};
	names.reduce(function(obj, name, index){
		obj[name] = values[index];
		return obj;
	}, ret);
	return ret;
};

$.Array = $.fill = function(size, fill){
    var rv = new Array(size);

    if(_.isFunction(fill)){
        while(--size>=0){
            rv[size] = fill(size);
        }
    }else{
        while(--size>=0){
            rv[size] = fill;
        }
    }

    return rv;
};

$.toNumber = function(ele){
    return parseFloat(ele*1);
};

$.toInteger = function(ele){
	return parseInt(ele*1);
};

$.isBuffer = function(buff){
	if(Buffer)
		return Buffer.isBuffer(buff);
	else
		throw new Error('Uknown type Buffer');
};

$.toBoolean = function(ele){
    return Boolean(parseInt(ele*1));
};

$.fromBits = function(ele){
    if(_.isArray(ele))
        ele = ele.join('');

    return parseInt(ele, 2);
};

$.toBits = function(num, bits){
    var inbits = Number(num).toString(2).split('');

    if(bits){
        inbits = inbits.reverse();
        return $.fill(bits, function(index){
            return inbits[index]*1 || 0;
        }).reverse();
    }else
        return inbits.map($.toNumber);
};

$.toString = function(ele, opt){
    return util.inspect(ele, opt || {});
};

$.Error = function(){
    throw new Error($.toString([].slice.call(arguments)));
};

$.Alert = function(){
    console.warn($.toString(arguments));
};

_.extend(_, $);
module.exports = _;