var assert = require('assert');
var $ = require('../tools.js');

var fuu = function(){};


describe('$', function(){
    it('.isFinite', function (){
        [-1,0,1,6.5,36].forEach(function(ele){
            assert($.isFinite(ele),ele);
        });


        [NaN,Infinity,'1',[],'string',{},null,undefined,fuu,true].forEach(function(ele){
            //assert(false);
            assert(!$.isFinite(ele),ele);
        });
    });

    it('.isInteger', function (){
        [-1,0,1,36].forEach(function(ele){
            assert($.isInteger(ele),ele);
        });


        [NaN,Infinity,'1',[],'string',{},null,undefined,fuu,6.5,true,false].forEach(function(ele){
            //assert(false);
            assert(!$.isInteger(ele),ele);
        });
    });

    it('.Array/fill', function (){
        var values = [null, undefined, false, 0, true, fuu, 'trt', [], {}];
        assert.deepEqual($.Array(values.length, function(index){return values[index]}), values, 'by function');
        assert.deepEqual($.Array(3, 0), [0,0,0], 'by constant');
    });


    it('.toNumber', function (){
        var input = ['0', '1', true, false,'5.5'];
        var output = [0, 1, 1, 0, 5.5];

        input.forEach(function(ele, index){
            assert.strictEqual($.toNumber(ele), output[index]);
        });
    });

    it('.toBoolean', function (){
        var input = [0, 1, true, false, '0', '1'];
        var output = [false, true, true, false, false, true];

        input.forEach(function(ele, index){
            assert.strictEqual($.toBoolean(ele), output[index]);
        });
    });

    it('.fromBits', function (){
        var input = ['0', '0101', [0], [0,1,0,1]];
        var output = [0, 5, 0, 5];

        input.forEach(function(ele, index){
            assert.strictEqual($.fromBits(ele), output[index]);
        });
    });

    it('.toBits', function (){
        var input = [0, 15];
        var output = [[0,0,0,0], [1,1,1,1]];

        input.forEach(function(ele, index){
            assert.deepEqual($.toBits(ele, 4), output[index]);
        });

        input = [255,0];
        output = [[1,1,1,1,1,1,1,1],[0]];
        input.forEach(function(ele, index){
            assert.deepEqual($.toBits(ele), output[index]);
            assert.strictEqual($.toBits(ele)[0], output[index][0]);
        });
    });
});
